cmake_minimum_required(VERSION 3.0)

project(test-ci)

function(visp_find_dataset found)
  set(file_to_test "mbt/cube.cao")
  set(_found FALSE)

  if(DEFINED ENV{VISP_INPUT_IMAGE_PATH})
    message("ENV{VISP_INPUT_IMAGE_PATH} is defined")
    message("file to test: $ENV{VISP_INPUT_IMAGE_PATH}/${file_to_test}")
    if(EXISTS "$ENV{VISP_INPUT_IMAGE_PATH}/${file_to_test}")
      set(_found TRUE)
    elseif(EXISTS "$ENV{VISP_INPUT_IMAGE_PATH}/ViSP-images/${file_to_test}")
      set(_found TRUE)
    elseif(EXISTS "$ENV{VISP_INPUT_IMAGE_PATH}/visp-images/${file_to_test}")
      set(_found TRUE)
    endif()
  else()
    message("ENV{VISP_INPUT_IMAGE_PATH} is not defined")
  endif()

  if(NOT _found)
    if(EXISTS "/usr/share/visp-images-data/ViSP-images/${file_to_test}")
      set(_found TRUE)
    elseif(EXISTS "/usr/share/visp-images-data/visp-images/${file_to_test}")
      set(_found TRUE)
    endif()
  endif()

  # Export return values
  set(${found} "${_found}" CACHE INTERNAL "")
endfunction(visp_find_dataset)

function(vp_find_dataset found location version major minor patch)
  set(file_to_test "mbt/cube.cao")
  set(_found FALSE)
  set(_location "")
  set(_version "")
  set(_major "")
  set(_minor "")
  set(_patch "")

  if(DEFINED ENV{VISP_INPUT_IMAGE_PATH})
    if(EXISTS "$ENV{VISP_INPUT_IMAGE_PATH}/${file_to_test}")
      set(_location "$ENV{VISP_INPUT_IMAGE_PATH}")
      set(_found TRUE)
    elseif(EXISTS "$ENV{VISP_INPUT_IMAGE_PATH}/ViSP-images/${file_to_test}")
      set(_location "$ENV{VISP_INPUT_IMAGE_PATH}/ViSP-images")
      set(_found TRUE)
    elseif(EXISTS "$ENV{VISP_INPUT_IMAGE_PATH}/visp-images/${file_to_test}")
      set(_location "$ENV{VISP_INPUT_IMAGE_PATH}/visp-images")
      set(_found TRUE)
    endif()
  endif()

  if(NOT _found)
    if(EXISTS "/usr/share/visp-images-data/ViSP-images/${file_to_test}")
      set(_location "/usr/share/visp-images-data/ViSP-images")
      set(_found TRUE)
    elseif(EXISTS "/usr/share/visp-images-data/visp-images/${file_to_test}")
      set(_location "/usr/share/visp-images-data/visp-images")
      set(_found TRUE)
    endif()
  endif()

  # Check version
  if(_found)
    if(EXISTS "${_location}/circle/circle.png")
      set(_major "3")
      set(_minor "6")
      set(_patch "0")
    elseif(EXISTS "${_location}/Solvay/Solvay_conference_1927_Version2_1024x705.jpg")
      set(_major "3")
      set(_minor "5")
      set(_patch "0")
    elseif(EXISTS "${_location}/Gaussian-filter/Klimt_RGB_Gaussian_blur_sigma=0.5.png")
      set(_major "3")
      set(_minor "4")
      set(_patch "0")
    elseif(EXISTS "${_location}/faces/1280px-Solvay_conference_1927.png")
      set(_major "3")
      set(_minor "3")
      set(_patch "0")
    elseif(EXISTS "${_location}/endianness/test_endianness_little_endian.bin")
      set(_major "3")
      set(_minor "2")
      set(_patch "0")
    else()
      set(_major "3")
      set(_minor "1")
      set(_patch "0")
    endif()
    set(_version "${_major}.${_minor}.${_patch}")
  endif()

  # Export return values
  set(${found} "${_found}" CACHE INTERNAL "")
  set(${location} "${_location}" CACHE INTERNAL "")
  set(${version} "${_version}" CACHE INTERNAL "")
  set(${major} "${_major}" CACHE INTERNAL "")
  set(${minor} "${_minor}" CACHE INTERNAL "")
  set(${patch} "${_patch}" CACHE INTERNAL "")
endfunction(vp_find_dataset)

visp_find_dataset(DATASET_FOUND)
message("DATASET_FOUND using visp_find_dataset(): ${DATASET_FOUND}")
vp_find_dataset(VISP_DATASET_FOUND VISP_DATASET_LOCATION
                VISP_DATASET_VERSION
                VISP_DATASET_VERSION_MAJOR
                VISP_DATASET_VERSION_MINOR
                VISP_DATASET_VERSION_PATCH)
message("VISP_DATASET_FOUND using visp_find_dataset(): ${VISP_DATASET_FOUND} ${VISP_DATASET_VERSION}")

add_executable(mytest mytest.cpp)
#add_executable(test-mkdir test-mkdir.cpp)

enable_testing()

add_test(mytest mytest)
#add_test(test-mkdir test-mkdir)
